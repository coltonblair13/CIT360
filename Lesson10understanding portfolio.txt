<!-- Start File
Understanding Portfolio — Week of March 16 - march 21

Threads, Executers, Runnables, and android handlers

This week for our group meeting I taught about Threads, Executers, Runnables, and Android Handlers. I mainly focused on threads and android handlers. You can see my presentation on our google community page at https://plus.google.com/photos/108923903387479234320/albums/6127769734908221409/6127769737717398226?fd=1&sqi=103827854741093694877&sqsi=54759895-e6d2-4124-8d3d-2e70d95df460&pid=6127769737717398226&oid=108923903387479234320 and my part starts at about 25:22. The code that I ended up using to create it can be found on my github at 


https://github.com/coltonblair13/CIT360/tree/master/ThreadsExecutersRunnable

Class Diagram

According to Wikipedia, a Class Diagram "in the Unified Modeling Language (UML) is a type of static structure diagram that describes the structure of a system by showing the system's classes, their attributes, operations (or methods), and the relationships among objects". Although this definition is pretty clear, you have to understand that Class Diagram are part of the system model's Logical View.

You can find my class diagram at https://github.com/coltonblair13/CIT360/blob/master/Appendix4ClassDiagram.pdf and the code that I used to create it at https://github.com/coltonblair13/CIT360/blob/master/ControlPanelEtchASketch.java. I also used BlueJ to create this diagram. That is a pretty cool tool that I have used in the past and remembered it to create this. 

Android HTTTPURLConnection

An URLConnection for HTTP is used to send and receive data over the web. Data may be of any type and length. This class may be used to send and receive streaming data whose length is not known in advance.

Uses of this class follow a pattern:

Obtain a new HttpURLConnection by calling URL.openConnection() and casting the result to HttpURLConnection.
Prepare the request. The primary property of a request is its URI. Request headers may also include metadata such as credentials, preferred content types, and session cookies.
Optionally upload a request body. Instances must be configured with setDoOutput(true) if they include a request body. Transmit data by writing to the stream returned by getOutputStream().
Read the response. Response headers typically include metadata such as the response body's content type and length, modified dates and session cookies. The response body may be read from the stream returned by getInputStream(). If the response has no body, that method returns an empty stream.
Disconnect. Once the response body has been read, the HttpURLConnection should be closed by calling disconnect(). Disconnecting releases the resources held by a connection so they may be closed or reused.


Some code for this topic that I have started on can be found at https://github.com/coltonblair13/CIT360/tree/master/httpurlconnection

Application Controller

I have just started learning about the application controller pattern. From what I understand Some applications contain a significant amount of logic about the screens to use at different points. This is called a wizard style of interaction, where the user is led through a series of screens in a certain order. 

To some degree the model view controller input controllers can make some of these decisions but as the application gets more complex this can lead to duplicated code because severl controllers for many different screens would need to know what to do in many different situations. 

By placing all the flow logic in an application controller you can remove this duplication Input controllers than ask the application controller for the appropriate commands for execution against a model and the correct view to use depending on the application context. 


Thanks!